ORG 0h
JMP START	;прыжок на адрес 8100h - начало программы

ORG 000Bh
JMP INT_0	;прыжок при прерывании по таймеру 0

ORG 8100h
START:

		SETB RS1	;устанавливаем 3 банк регистров
		SETB RS0	;устанавливаем 3 банк регистров

        MOV R0, #0	;устанавливаем начальные значения R0
        MOV R1, #0	;устанавливаем начальные значения R1
        MOV R2, #0	;устанавливаем начальные значения R2
        MOV R3, #0	;устанавливаем начальные значения R3
        MOV R4, #0	;устанавливаем начальные значения R4

        MOV DPTR, #03h	;Настраиваем режим работы портов, устанавливаем доступ к управляющему байту
        MOV A, #10000010b	;Заносим константу 82h (порт А - запись, порт B - чтение, порт C - запись) в аккумулятор
        MOVX @DPTR, A	;Заносим константу в управляющий байт

        SETB EA	;разрешаем прерывания
        SETB ET0	;разрешаем прерывания по таймеру 0

		MOV A, TMOD	;помещаем в аккумулятор содержимое TMOD
        ORL A, #00000001b	;настраиваем режим работы таймера 0 на режим 1 (16битный последовательный)
		MOV TMOD, A	;помещаем новую константу таймера в TMOD

		;11,059 * (1/12) = 0,9216
		;0,9216 * 1000000 = 921600
		;921600 / 20 = 46080
		;65536 - 46080 = 19456
		
        MOV TH0, #04Ch	;Загружаем начальное значение таймера 19456
        MOV TL0, #00h	;Загружаем начальное значение таймера 19456

        SETB TR0	;Запуск таймера
	
	LOOP:
		JMP INT_1	;Отображение на индикаторе
	LOOP_START:
		NOP			;пропускаем 1 такт
		MOV A, #17d	;делаем задержку в 17 мс (каждая лампа обновляется по 60 раз в сек)
	LOOP_1:
		DEC A	;вычитаем 1 для цикла
		CJNE A, #0, LOOP_1	;если не ноль ожидаем
		JMP LOOP	;запускаем цикл заново до бесконечности


    SJMP $

INT_0:
        INC R0	;Увеличиваем R0 на 1

        MOV TH0, #04Ch	;Снова заносим таймерную константу 19456
        MOV TL0, #00h	;Снова заносим таймерную константу 19456

        CJNE R0, #20, EXIT_INT_0	;Если не отсчитали R0 20 раз выходим
        MOV R0, #0	;Сбрасываем R0

        INC R1	;Увеличиваем R1 (количество секунд) на 1

        CJNE R1, #60d, EXIT_INT_0	;Если не отсчитали 60 секунд выходим
        MOV R1, #0	;Сбрасываем R1 (количество секунд)
        INC R2	;Увеличиваем R2 (количество минут) на 1

        CJNE R2, #60d, EXIT_INT_0	;Если не отсчитали 60 минут выходим
        MOV R2, #0	;Сбрасываем R2 (количество минут)
        INC R3	;Увеличиваем R3 (количество часов) на 1

        CJNE R3, #24d, EXIT_INT_0	;Если не отсчитали 24 часа выходим
        MOV R3, #0	;Сбрасываем R3 (количество часов)

EXIT_INT_0:
        RETI	;Выход из прерывания

INT_1:
        MOV DPTR, #02h	;Заносим константу 2 для доступа к порту C

HOURS_HIGH:
        CJNE R4, #0, HOURS_LOW	;Если не 0 значит не этот индикатор

        MOV A, R3	;Помещаем в аккумулятор количество часов
        MOV B, #10	;Помещаем в доп. аккумулятор число 10
        DIV AB	;Делим часы на 10 и теперь в A - старшая цифра, в B - младшая

        ORL A, #00010000b	;Выбираем индикатор старшей цифры часа
        MOVX @DPTR, A	;Помещаем на порт C значение из аккумулятора

        JMP NEXT_INDICATOR	;Следующий индикатор

HOURS_LOW:
        CJNE R4, #1, MINUTES_HIGH	;Если не 1 значит не этот индикатор

        MOV A, R3	;Помещаем в аккумулятор количество часов
        MOV B, #10	;Помещаем в доп. аккумулятор число 10
        DIV AB	;Делим часы на 10 и теперь в A - старшая цифра, в B - младшая

        MOV A, B	;Помещаем в A младшую цифру часа
        ORL A, #00100000b	;Выбираем индикатор младшей цифры часа
        MOVX @DPTR, A	;Помещаем на порт C значение из аккумулятора

        JMP NEXT_INDICATOR	;Следующий индикатор

MINUTES_HIGH:
        CJNE R4, #2, MINUTES_LOW	;Если не 2 значит не этот индикатор

        MOV A, R1	;Помещаем в аккумулятор количество секунд
        MOV B, #2	;Помещаем в доп. аккумулятор число 2
        DIV AB	;Делим секунды на 2 и теперь в A - частное, в B - остаток
        MOV A, B	;Помещаем в A остаток от деления

        CJNE A, #0, NEXT_INDICATOR	;Если остаток не 0 выключаем индикатор и переходим к следующему

        MOV A, R2	;Помещаем в аккумулятор количество минут
        MOV B, #10	;Помещаем в доп. аккумулятор число 10
        DIV AB	;Делим минуты на 10 и теперь в A - старшая цифра, в B - младшая

        ORL A, #01000000b	;Выбираем индикатор старшей цифры минуты
        MOVX @DPTR, A	;Помещаем на порт C значение из аккумулятора

        JMP NEXT_INDICATOR	;Следующий индикатор

MINUTES_LOW:
        MOV A, R1	;Помещаем в аккумулятор количество секунд
        MOV B, #2	;Помещаем в доп. аккумулятор число 2
        DIV AB	;Делим секунды на 2 и теперь в A - частное, в B - остаток
        MOV A, B	;Помещаем в A остаток от деления

        CJNE A, #0, NEXT_INDICATOR	;Если остаток не 0 выключаем индикатор и переходим к следующему

        MOV A, R2	;Помещаем в аккумулятор количество минут
        MOV B, #10	;Помещаем в доп. аккумулятор число 10
        DIV AB	;Делим минуты на 10 и теперь в A - старшая цифра, в B - младшая

        MOV A, B	;Помещаем в A младшую цифру минут
        ORL A, #10000000b	;Выбираем индикатор младшей цифры минуты
        MOVX @DPTR, A	;Помещаем на порт C значение из аккумулятора

NEXT_INDICATOR:
        INC R4	;Увеличиваем R4, т.е. переход к следующему индикатору
        CJNE R4, #4, EXIT_INT_1	;Если не больше 4 (индексация от 0) то выходим
        MOV R4, #0	;Сбрасываем R4, начиная от первого индикатора

EXIT_INT_1:
        JMP LOOP_START	;Переходим к началу цикла вывода
END